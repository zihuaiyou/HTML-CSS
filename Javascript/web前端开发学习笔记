Day1
软件开发架构
    cs 客户端 服务端
    bs 浏览器 服务端
    bs本质也是cs

浏览器窗口输入网址发生了什么事：
    1.浏览器朝服务端发送请求
    2.服务端接收请求
    3.服务端返回相应的响应（返回一个百度首页）
    4.浏览器接受响应，通过特定的规则渲染页面展示给用户看

浏览器可以充当很多服务端的客户端(百度 腾讯视频 )
    如何做到浏览器和多个不同的客户端进行数据交互？
    制定一个统一的标准，如果你想让你写的服务端能够跟客户端之间作正常的数据交互，那么必须遵循一些规则

HTTP协议
    超文本传输协议 用来规定客户端和浏览器之间的数据交互格式
    不遵循协议就要自己写客户端

    四大特性
    1.基于请求响应
    2.基于TCP/IP作用于应用层之上的协议
    3.无状态
        不保存用户的信息
            由于HTTP协议是无状态的，所以后续出现了一些专门做记录用户状态的技术
            cookie、session、token
    4.无/短链接
        请求一次响应一次，之后就没有关系了
            长链接：双方建立连接之后默认不断开 websocket(多人聊天室)

    请求数据格式
        请求首行(标识HTTP协议版本，当前请求方式)
        请求头(一大堆k,v键值对)
        \r\n(千万不能省略!!!)
        请求体(get没有，post有，存放的是post请求提交的敏感数据)
            (get请求也可以携带参数，但是不在请求体里，参数放在url里，用"?"拼接)

        请求方式
            1.get请求
                朝服务端要数据
                eg:输入网址获取对应内容
            2，post请求
                朝服务端提交数据
                eg:用户登录 输入用户名和密码后 提交到服务端后端作身份校验

    响应数据格式
        同请求数据格式一样
        响应首行(标识HTTP协议版本，响应状态码)
        响应头(一大堆k,v键值对)
        \r\n(千万不能省略!!!)
        响应体(返回给浏览器展示给用户看的数据)

        响应状态码
            用一串简单的数字来表示一些复杂的状态或者描述性信息
            (404:请求资源不存在)
                1xx:服务端已经成功接受到你的数据正在处理，你可以继续提交额外的数据
                2xx：(比较常见)服务端成功响应了你想要的数据(200 ok请求成功)
                3xx：重定向(当你访问一个需要登录的页面，你会发现会自动跳转到登录页面)
                4xx：请求错误(404:请求资源不存在  403：当前请求不合法或者不满足访问条件)
                5xx: 服务器内部错误(500,服务器挂了)

    url:统一资源定位符（网址）


Day2
HTML
    超文本标记语言,书写网页的一套标准
    XML也可以书写前端页面(例如odoo框架)
    如果你想让浏览器能够渲染出你写的页面，你就必须遵循HTML语法
    我们让浏览器看到的页面，内容都是HTML代码(所有网站都是HTML代码)

    注释：注释是代码之母
    <!--单行注释-->
    <!--
    多行注释
    多行注释
    多行注释
    -->
    由于HTML代码非常的杂乱无章并且很多，所以我们习惯性的用注释来划定区域方便后续的查找
        <!--导航条开始-->
        导航条所有的HTML代码
        <!--导航条结束-->
        <!--左侧菜单栏开始-->
        左侧菜单栏的HTML代码
        <!--左侧菜单栏结束-->

    HTML文档结构
    <html>
        <head></head>:head内的标签不是给用户看的，而是定义一些配置主要是给浏览器看的
        <body></body>：body内的标签，写什么浏览器就渲染什么，用户就能看什么
        </html>

    PS；文件的后缀名其实是给用户看的，只不过对应不同的文件后缀名有不同的软件来处理并添加很多功能
        注意：HTML代码是没有格式的，可以全部写在一行，只不过我们习惯了缩进表示代码
        两种打开HTML的方法
            -找到文件位置打开
            -用pycharm打开(推荐使用谷歌浏览器)
        标签的分类
            <h1>hello guys</h1>
            <a href="https://www.mzitu.com/"></a>
            <img src="" />

            1.双标签
            2.单标签(自闭合标签)

            head内常用标签
                <title>显示标题</title>(用来显示标题的)

                书写标签名，tab键补全
                <style>里面书写css代码</style>
                <script>内部用来书写JS代码，也可引入外部JS文件</script>
                <link rel="stylesheet" href="my_css.css"> 用来引入外部css文件
                <meta >meta标签可以声明当前这个html文档的字库，但是一定要和保存的类型一样，否则乱码！（重点）
                <meta name="keywords" content="老男孩教育,老男孩,老男孩培训,Python培训">当你用浏览器搜索的时候，
                只要输入了keywords关键字,那么该网页都有可能被百度搜索出来
                <meta name="description" content="老男孩教育专注于Linux培训,Python培训">网页的描述性信息

            body内常用标签
                 <h1>hello world</h1>标题标签，1~6级
                 <b>加粗</b>
                 <i>斜体</i>
                 <u>下划线</u>
                 <s>删除线</s>
                 <p>段落标签</p>
                 <br>换行
                 <hr>水平分割线
                 标签的分类2
                    块级标签：独占一行
                        h1-h6,p,div
                        1.块级标签可以修改长宽 行内标签不可以，修改了也不会变化
                        2.块级标签内部可以嵌套任意块级标签和行内标签
                        3.p标签虽然是块级标签，但他只能嵌套行内标签，如果套了，浏览器会自动帮你解开(浏览器是面向用户的,不会轻易报错，
                        报错也看不见)
                        总结：
                            只要是块级标签都可以嵌套任意的块级标签和行内标签
                            但是p标签只能嵌套任意的行内标签

                    行内标签：自身文本多大，就占多大
                        i,u,s,b,span,a,img
                        行内标签不能嵌套块级标签
                        但是可以嵌套行内标签


Day3
                 特殊符号:
                    &nbsp 空格
                    &gt;  >
                    &lt;  <
                    &amp; &
                    &yen; ¥
                    &copy；©
                    &reg; ®

                 常用标签
                    div:块级标签
                    span:行内标签

                    上述两个标签是在构造页面初期最常使用的，页面的布局一般先用div和span占位之后再去调整
                    样式，尤其是div使用的非常频繁
                    div 可以看成一块区域 也就意味着用div来提前规定所有区域，之后往该区域内部填写内容即可
                    而普通的文本先用span标签

                    img标签：图片标签
                        src:
                            1.图片路径 可以是本地的，也可以是网上的
                            2.url 自动朝url发送get请求获取数据
                        alt:
                            图片加载不出来时，给图片的描述性信息
                        title:
                            当鼠标悬浮到图片之上时，展示的提示性信息
                        height=""
                        weight=""
                            单位(px)
                            高度和宽度当你只调整一个时，会等比例缩放
                            修改两个参数，不考虑比例时，图片会失真
                    a标签：链接标签
                        <a href=""></a>
                        href
                            1.放url
                                当a标签没被点击过和被点击过颜色不一样
                            2.放其他标签的id值，点击即可跳转到对应的标签位置

                        target:默认是_self(当前页面跳转)
                            _blank:新建页面跳转

                        当作锚点功能
                            eg:点击一个文本标题，页面自动跳转到标题对应内容
                                此时href里写"#id值"

                    标签必须具有的两个重要属性
                        1.id值
                            类似于标签的身份证号，同一个HTML页面的id值不能重复
                        2.class值
                            类似于面向对象的继承，一个标签可以继承多个class值

                        标签既可以有默认属性，也可以自定义属性


Day4
                    列表标签：
                        1.无序列表（较多）
                            页面布局的时候，只要是排版一致的几行数据基本用的是ul套li
                            ul属性type(circle 圆圈)
                        2.有序列表（了解）
                            ol
                                li
                        3.标题列表（了解）
                            dl
                                dt
                                dd

                总结：
                    学习前端就是死记硬背，没有任何逻辑可言
                    学习HTML是一门标记语言
                    记住每一个标签是什么意思



Day5
                    表格标签
                        <table> 属性boder="1" 加边框,cellpadding , cellspacing
                            <thead> 表头(字段信息)
                                <tr> 一个tr就是一行
                                    <th>username</th> th加粗
                                    <td>username</td> td正常文本
                                </tr>
                            </thead>
                            <tbody>表单()
                                <tr>
                                    <td rowspan="2">jason</td> rowspan="2",垂直方向占两行
                                    <td>123</td>
                                    <td>read</td>
                                </tr>
                            </tbody>
                        </table>

                    原生的表格标签很丑，但是后续我们一般使用框架封装好的，很好看

                    表单标签form
                        能够获取前端用户数据(用户输入的，用户选择的，用户上传...)基于网络发送给后端服务器
                        <form action=""></form> 在该form内部书写的获取用户的数据都被form标签提交到后端
                            action 控制数据提交的后端路径(给哪个服务器提交数据)
                                        1.什么都不写默认就是朝当前所在页面的url提交数据
                                        2.写全路径：https://www.baidu.com 朝百度服务端提交
                                        3.只写路径后缀action='/index/' 自动识别出当前服务端的ip和port拼接到前面
                                            host:port/index/


                            label 和input都是行内标签
                            <label for="d1">
                                username:<input type="text" id="d1">
                            </label>
                                - 第一种 input 可以放在label内

                            <label for="d2">password</label>
                            <input type="text" id="d2">
                                - 第二种 input 可以不放进label内

                            input 标签类似于前端的变形金刚，通过type属性变形
                                text:普通文本
                                password:密文
                                date；日期
                                submit:用来触发form表单提交数据的动作
                                button: 就是一个普通按钮，本身没有任何功能，学完js后，可以为他自定义各种功能
                                reset:重置内容
                                radio:单选
                                    默认选中要加checked="checked"
                                    当标签的属性名和属性值一样时可以简写
                                        <input type="radio" name="gender" checked>
                                checkedbox：多选
                                    <input type="checkbox" name="hobby" checked>DBJ
                                file:获取文件 也可以一次获取多个
                                    <input type="file" multiple>

                            select标签 下拉菜单 标签默认是单选，可以增加multiple 变成多选
                                下拉框选项是option标签
                                <select name="" id="" multiple>
                                    <option value="" selected>新垣结衣</option>
                                    <option value="">斯嘉丽</option>
                                </select>

                            textarea标签：用来获取大段文本

                                能够触发form表单提交数据的按钮有哪些：(要记住)
                                    1.<input type="submit">
                                    2.<button></button> (不要和input里type属性button弄混)

                                所有获取用户输入的标签都应该有name属性，
                                    name类似于字典的key，用户输入的数据类似于字典的value
                                    <p>gender
                                        <input type="radio" name="gender">男
                                        <input type="radio" name="gender">女
                                    </p>

                    验证form表单提交数据(flask框架)
                        pip install FLASK

                    form 表单默认提交数据的方式 是get请求，数据是直接放在url上的
                        这种请求不安全

                    <form action="http://127.0.0.1:5000/index/" method="post">
                    你可以通过method指定提交方式

                    针对用户选择的标签 用户不需要输入内容 但是你需要提前给这些标签添加内容(value值)

                    form表单提交文件需要注意，method 必须是post,enctype="multipart/form-data"
                        enctype 类似于数据提交的编码格式
                            默认是urlencoded 只能提交普通文本数据
                            formdata 就可以提交文件数据
                    <form action="http://127.0.0.1:5000/index/" method="post" enctype="multipart/form-data">

                    针对用户输入的标签，你加了value值，value就成为默认值
                    disabled（禁用）,readonly（只读）



Day6
CSS：层叠样式表 给HTML标签添加样式的，让他更加好看
注释：/*单行注释*/
     /*
      多行注释1
      多行注释2
      多行注释3
     */
     通常在写CSS样式的时候，也会用注释来划定区域
         /*这是博客园首页的CSS样式文件*/
         /*顶部导航条样式*/
            代码
         /*左侧菜单栏样式*/
            代码
         /*右侧菜单栏样式*/
            代码

     CSS的语法结构:
        选择器{
            属性1:值1;
            属性2:值2;
            属性3:值3;
            属性4:值4;
            }

     CSS三种引入方式：
        1.style 里直接写
        <style>
            h1 {
            color: yellow;
            }
        </style>

        2.link 标签引入外部CSS文件(最正规的方式)
        3.行内式(一般不用)
            <h1 style="color: red">老板好</h1>

    CSS的学习流程
        1.先学如何查找标签
            CSS查找标签的方式你一定要学会
            因为后面所有框架封装的查找语句都是基于CSS的

        2.之后再学如何添加样式

    CSS选择器
        基本选择器
            1.id选择器
                #d1 { /*找到id是d1的标签 将文本颜色变成黄色*/
                color: yellow;
                }

            2.类选择器
                .c1 { /* 找到class值里面包含c1的标签*/
                color: red;
                }

            3.元素/标签选择器
                span {
                color: red;
                }

            4.通用选择器
                * {
                /*将html上所有标签全部选中*/
                color: red;
                }

            id和类选择器最常用

        组合选择器：
            前端里 将标签的嵌套的嵌套关系用亲戚来描述层级
                <div>div
                    <p>div里面的p</p>
                    <p>div里面的p
                        <span> div p span</span>
                    </p>
                    <span>span</span>
                    <span>span</span>
                </div>
                div里面的p span 都是div的后代
                p是div的儿子
                p里面的span是p的儿子 是div的孙子
                div是p的父亲
            1.后代选择器
                div span {
                    color: red;
                }

            2.儿子选择器
                div>span{
                    color: red;
                }

            3.毗邻选择器
                div+span { /*同级别紧挨着我的下一个*/
                    color: red;
                }

            4.弟弟选择器
                div~span { /*同级别下面所有的span*/
                    color: red;
                }

        属性选择器：
            属性选择器是以[]作为标志的
            1.含有某个属性
                [username] {
                /*将所有含有属性名是username标签背景色改为红色*/

                    background-color: red;
                }

            2.含有某个属性并且有某个值
                [username=jason] { /*找到所有属性名是username并且属性值是jason的标签*/
                    color: yellow;
                    background-color: yellow;
                }

            3.含有某个属性并且有某个值的某个标签
                input[username="jason"] { /*找到所有属性名是username并且属性值是jason的INPUT标签*/
                    background-color: pink;
                }

        标签既可以有默认的属性 id class,还可以有自定义的属性class并且支持多个
            <p id="" username=""></p>

        分组与嵌套：
            多个选择器可以并列公用一套css样式
                div,p,span{/*分组 “,” 表示同级别*/
                    color: red;
                }

            不同选择器之间也可以混用
                #d1,.c1,span {
                    color: orange;
                }

                #d1 .c2 #d3{/* 空格表示嵌套关系
                    color: red;
                }



Day7
        伪类选择器:
            a:link { /*访问之前的状态*/
                color: red;
            }
            a:visited { /*访问之后的状态*/
                color: darkgray;
            }
            a:hover {
                color: aqua; /*鼠标悬浮态*/
            }
            a:active { /*鼠标点击不松开的状态 激活态*/
                color: black;
            }

        伪元素选择器：
            p:first-letter { /*给第一个字加样式*/
                font-size: 48px;
                color: orange;
            }
            p:before { /*在文本开头用css添加文本内容 无法选中*/
                content: "你说的对";
                color: #0000cc;
            }
            p:after { /*在文本结尾用css添加文本内容 无法选中*/
                content: " ?";
                color: orange;
            }
            before 和 after通常都是用来清除浮动带来的影响:父标签塌陷的问题

        选择器优先级
            id选择器
            类选择器
            标签选择器
            行内式

            1.选择器相同 书写顺序不同(就近原则（谁离标签近就优先谁，行内选择器一般最近）)
            2.选择器不同  (精确度越高越有效，行内选择器>id选择器>类选择器>标签选择器)
            PS:!important 强制让标签采用你的样式 不推荐使用



Day8
        CSS 属性相关

            设置长宽
            p {
                background-color: red;
                height: 200px;
                width: 400px;
            }
            span {/*行内标签无法设置长宽，写了也不会生效*/
                background-color: green;
            }
            PS:块级标签的宽度不修改的情况下默认占浏览器一整行，默认情况下，块级标签的高度是取决于标签内部文本的高度
               行内标签宽度和高度都是由文本内容决定的，不可以设置长宽

            字体属性
                p {/*设置字体样式和大小*/
                    font-family:"Microsoft YaHei UI Light";
                    font-size: 24px;
                    font-weight: bolder; /*bolder lighter 100~900 inherit继承父元素的粗细值*/
                    color: #ffffff;/*可以直接写颜色的英文单词，颜色编号(#开头)，也可用rgb(111,222,123)范围0~255，
                                rgba(111,222,123,0.5)最后一个是透明度，范围是0~1*/
                    /*当你想用一些颜色时，可用现成的工具获取(截图工具)*/
                }

            文字属性
                p {
                    text-align: left;/*对齐*/
                    text-decoration: underline;/*下划线*/
                    text-decoration: overline;
                    text-decoration: line-through;/*删除线，html中很多标签渲染效果是不一样的，语义不一样*/
                    text-indent: 2em; /*缩进2字符，只能用于块级标签*/
                }

                a {
                    text-decoration: none;/*无样式，一般用来给a标签去下划线*/
                }

            背景属性
                div {
                    height:400px ;
                    width:400px ;
                    background-color: red;
                    background-image: url("1612670016(1).jpg");/*默认铺满*/
                    background-repeat: no-repeat;/*不铺满*/
                    background-repeat: repeat-x;/*水平方向铺*/
                浏览器不是一个平面，是一个三维立体结构，z轴指向用户，越大离用户越近
                    background-position: 200px 200px;/*控制背景图的位置，第一个参数控制左右，第二个参数控制上下*/
                    background-position: center center;
                    PS:在调样式的时候，先借助浏览器快速微调，然后将调好的参数修改到css样式中即可

                /*如果出个多个属性名前缀一样的情况，可以简写 只写前缀*/
                /*只需要填上你需要写的参数即可，位置和个数都不做限制*/
                    background: red url("1612670016(1).jpg") no-repeat center center;



Day9
            边框
                div {
                    /*    border-left-width:5px ;*/
                    /*    border-left-color:red ;*/
                    /*    border-left-style: dotted;*/

                    /*    border-right-width:10px ;*/
                    /*    border-right-color:green ;*/
                    /*    border-right-style: solid;*/

                    /*    border-top-width:15px ;*/
                    /*    border-top-color:pink ;*/
                    /*    border-top-style: dashed;*/

                    /*    border-bottom-width:10px ;*/
                    /*    border-bottom-color:orange ;*/
                    /*    border-bottom-style: solid;*/
                    /*前缀相同 可以简写*/
                border: 3px solid red;/*三者位置可以随意写*/

                画圆
                 #d1 {
                        background-color: red;
                        height: 400px;
                        width: 400px;
                        border-radius: 50%; /*直接写50%即可 长宽一致就是圆 不一样就是椭圆*/
                    }

                }

            display 属性
                能让标签具有自身没有的属性和特征
                1.display: none;/*隐藏标签 不展示到前端页面 原来的位置也不再占有*/
                    visibility: hidden/*隐藏了 位置还在*/
                2.display: inline;/*将块级标签设置为行内标签的特点，一行显示 并且没法显示长宽*/
                3.display: block;/*将行内标签设置成块级标签的特点*/
                4.display: inline-block;/*让标签既可以在一行显示 又可以设置长宽*/

            盒子模型：
                以快递盒为例
                    快递盒与快递盒之间的距离(标签与标签之间的距离 margin外边距)
                    盒子的厚度(标签的边框 border)
                    盒子里面的物体到盒子之间的距离(内容到边框的距离 padding内边距)
                    物体的大小(内容 content)

                如果你想调节标签与标签之间的距离 你就可以调整margin
                浏览器会自带8px的margin，一般情况我们在写页面的时候，上来就会将body的margin去除
                    margin:外边框
                        margin: 0;/*上下左右全是0*/
                        margin: 10px 20px;/*第一个上下，第二个是左右*/
                        margin: 10px 20px 30px;/*第一个是上，第二个左右，第三个下*/
                        margin: 10px 20px 30px 40px;/*上 右 下 左 顺时针*/

                         #d1{
                            margin-bottom: 20px;
                        }
                        #d2 {
                            margin-top: 50px;/*标签之间距离取大的那个 margin之间不叠加*/
                        }
                        #dd {
                            margin: auto auto;/*auto居中 竖直方向没有用，只能做到标签的水平居中*/
                        }

                    padding:内边框
                        padding: 10px 20px 30px 40px;/*规律同margin*/

            浮动:标签脱离文档，飘在空中，浮动的元素没有块级一说，本身浮起来多大，就占多大
                 标签的排版一般不用display,用浮动
                 只要是涉及到页面的布局，一般都是用浮动来提前规划好页面
                 float: left;/*浮到空中往左飘*/
                 float: right;/*浮到空中往右飘*/

            浮动带来的影响:
                浮动会造成父标签塌陷的问题

                解决浮动带来的影响 推导步骤
                    1.自己加一个div设置高度
                        #d4 {
                              height: 100px; /*自己设置高度撑起来*/
                              }

                    2.利用clear属性
                        #d4 {
                            clear: left;/*该标签的左边(地面和空中)不能有浮动的元素*/
                            }

                    3.通用解决浮动带来的影响方法(最常用)
                        在写html页面之前，先提前写好处理浮动带来影响的css代码
                        .clearfix:after {
                            content: "";
                            display: block;
                            clear: both;
                        }
                        之后只要在标签出现了塌陷的问题就会给该塌陷的标签加一个clearfix属性即可

            溢出属性：可用于个人主页头像设计
                overflow: visible;/*默认展示*/
                overflow: hidden;/*溢出部分直接隐藏*/
                overflow: scroll;/*设置成上下滚动条*/


Day10
            定位
                1.静态
                    所有标签默认都是静态的，无法改变位置
                    position: static;/*默认是static无法修改位置*/
                2.相对定位(了解)
                    相对于标签原来的位置做移动relative
                    position: relative;/*相对定位 虽然没有移动 但是已经定位过了*/
                3.绝对定位（常用）
                    相对于已经定位过的父标签做移动（如果没有父标签那么就以body为参照）
                    eg:小米网站购物车
                    当你不知道页面其他标签的位置和参数，只给你一个父标签的参数，让你基于该标签做定位
                    position: absolute;/*绝对定位*/
                4.固定定位(常用)
                    相对于浏览器窗口固定在哪个位置
                    eg:右侧小广告
                    position: fixed;/*固定定位 写了fixed后 定位就是依据浏览器窗口*/

                PS：浏览器会优先展示文本内容

            验证浮动和定位是否脱离文档流(原来的位置是否还保留)
                浮动
                相对定位
                绝对定位
                固定定位

                不脱离文档流
                    相对定位
                脱离文档流
                    浮动
                    绝对定位
                    固定定位

            z-index模态框
                eg:百度登录页面 其实是三层结构
                    1.最底部是正常内容（z=0）  最远的
                    2.黑色透明区（z=99）      中间层
                    3.白色的注册区域（z=100） 离用户最近

            透明度opacity
                不单单可以修改颜色的透明度还可以同时修改字体的透明度
                rgba只能影响颜色
                opacity 可以修改颜色和字体

        练习：博客园首页搭建
            当你在设计页面时，先用div划分区域，之后再填写基本内容，最后再调节样式


    Javascript:
        ES5.1和ES6.0
        注释：
            单行注释 //
            /*
            多行注释1
            多行注释2
            多行注释3
            */

        JS 两种引入方式
            1.script标签直接书写
            2.script标签src属性引入外部js代码

        语法结构:
            js是以分号作为语句结束

        js学习流程：
            变量
            数据类型
            流程控制
            函数
            对象
            内置方法/模块

        1.变量
            js中首次定义一个变量名的时候需要用关键字声明
             1.关键字var
                 var name='jason';

             2.es6推出的新语法
                 let name ='jason';
                 必须使用支持ES6.0的编辑器

             PS: var与let的区别：（var无法区分全局与局部，let可以）
                    var在for循环里定义也会影响全局，let在局部定义也只会在局部生效
        2.常量
            python中没有真正意义上的常量，默认全大写就是常量
            js中有真正意义上的常量
                const pi = 3.14

                12312313
































        
            

































